pacman::p_load(tidyverse)
Incomes <- read_csv("C:\\Dropbox\\Dropbox (Phil Research)\\RA_Sandbox\\CDMX_Wage_Prediction\\Redux_202002\\2007\\GB\\Positive Income\\positive_predicted_inc_07.csv")
windows()
ggplot(data = Incomes, aes(x = Income, y = Predicted_Income)) +
geom_point() +
geom_smooth(se = FALSE, method = "loess", color = "blue") +
geom_abline(intercept = 0, slope = 1, size = 1, color = "red") +
scale_x_log10("Log 10 Income (Pesos / Month)", labels = scales::comma) +
scale_y_log10("Log 10 Predicted Income (Pesos / Month)", labels = scales::comma) +
ggtitle("2007 Predicted Income vs. Income with\nLoess Smoothing and 45 Degree Lines") +
labs(subtitle = "Trained on Income > 0") +
theme_bw()
?pnorm
Incomes <- read_csv("C:\\Dropbox\\Dropbox (Phil Research)\\RA_Sandbox\\CDMX_Wage_Prediction\\Redux_202002\\1994\\GB\\Positive Income\\positive_predicted_inc_94.csv")
windows()
ggplot(data = Incomes, aes(x = Income, y = Predicted_Income)) +
geom_point() +
geom_smooth(se = FALSE, method = "loess", color = "blue") +
geom_abline(intercept = 0, slope = 1, size = 1, color = "red") +
scale_x_log10("Log 10 Income (Pesos / Month)", labels = scales::comma) +
scale_y_log10("Log 10 Predicted Income (Pesos / Month)", labels = scales::comma) +
ggtitle("1994 Predicted Income vs. Income with\nLoess Smoothing and 45 Degree Lines") +
labs(subtitle = "Trained on Income > 0") +
theme_bw()
pacman::p_load(tidyverse)
set.seed(1)
x <- rnorm(1000)
z <- 0  + 3*x
# pr <- pnorm(z)
y <- ifelse(z > 0, 1, 0)
LL <- function(beta) sum(y * log(pnorm(t(x) * beta)) + (1 - y) * log(1 - pnorm(t(x) * beta)))
optimize(f = LL,
interval = c(-5, 5),
maximum = T)
pnorm(x * 3)
pnorm(x * 3) %>% log(.)
sum(y * log(pnorm(t(x) * 3)) + (1 - y) * log(1 - pnorm(t(x) * 3)))
sum(y * log(pnorm(t(x) * 2)) + (1 - y) * log(1 - pnorm(t(x) * 2)))
sum(y * log(pnorm(t(x) * 3)) + (1 - y) * log(1 - pnorm(t(x) * 3)))
log(-2)
pnorm(x * 3)
x[pnorm(x * 3)]
x * 3
pnorm(x * 3)
sum(pnorm(x * 3) > 1 | pnorm(x * 3) < 0)
sum(log(1 - pnorm(x * 3) > 1 | (log(1 - pnorm(x * 3) < 0))))
y * log(pnorm(t(x) * 3)) + (1 - y) * log(1 - pnorm(t(x) * 3))
y * log(pnorm(t(x) * 3)) + (1 - y) * log(1 - pnorm(t(x) * 3)) %>% sum()
y * log(pnorm(t(x) * 3)) + (1 - y) * log(1 - pnorm(t(x) * 3))
sum(.Last.value)
y * log(pnorm(t(x) * 3)) + (1 - y) * log(1 - pnorm(t(x) * 3))
map_dbl(.Last.value, sum)
a <- y * log(pnorm(t(x) * 3)) + (1 - y) * log(1 - pnorm(t(x) * 3))
a
a <- y * log(pnorm(t(x) * 3)) + (1 - y) * log(1 - pnorm(t(x) * 3)) %>% t()
a
a <- y * log(pnorm(x * 3)) + (1 - y) * log(1 - pnorm(x * 3))
a
sum(a)
sum(a)
dim(a)
a
class(a)
map(a, sum)
map_dbl(a, sum)
apply(a, MARGIN = 2, sum)
b <- as.vector(a)
b
dim(b)
length(a)
sum(b)
cumsum(a)
x[494]
x[495]
a[494]
b[494]
length(z)
length(b)
length(a)
sum(z)
sum(a)
a
a[!is.numeric(a)]
a[is.numeric(a)]
is.numeric(a)
map_lgl(a, is.numeric)
a[!map_lgl(a, is.numeric)]
a[map_lgl(a, is.numeric)]
(a, is.numeric) %>% sum(0)
(a, is.numeric) %>% sum()
map_lgl(a, is.numeric) %>% sum()
a
a[843]
x[843]
y[843] * log(pnorm(x[843] * 3)) + (1 - y[843]) * log(1 - pnorm(x[843] * 3))
y[843]
pnorm(x[843] * 3)
pnorm(x[843] * 3) %>% log()
pnorm(843)
pnorm(3.055742 * 3)
log(1)
sum(.Last.value)
1 - pnorm(x[843] * 3)
log(0)
.000001
log(.00001)
log(1e-10)
log(1e-100)
log(1e-1000)
log(1e-100)
LL <- function(beta) sum(y * log(pnorm(t(x) * beta)) + (1 - y) * log(1 - pnorm(t(x) * beta) + 1e-100))
set.seed(1)
x <- rnorm(1000)
z <- 0  + 3*x
# pr <- pnorm(z)
y <- ifelse(z > 0, 1, 0)
LL <- function(beta) sum(y * log(pnorm(t(x) * beta)) + (1 - y) * log(1 - pnorm(t(x) * beta) + 1e-100))
optimize(f = LL,
interval = c(-5, 5),
maximum = T)
search_values <- seq(-10, 10, .01)
LL_values <- map_dbl(search_values, LL)
max_point <- tibble(x = search_values[which.max(LL_values)],
y = LL_values[which.max(LL_values)])
windows()
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = max_point$x + .1, y = -500, xend = max_point$x, yend = max_point$y, arrow = arrow(length = unit(2, "mm"))) +
annotate(geom = "text", x = max_point$x - .05, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and Simulated", expression(Beta))) +
theme_bw()
log(.01)
log(2)
log(.01)
log(.1)
log(exp(.000001))
LL <- function(beta) sum(y * log(pnorm(t(x) * beta)) + (1 - y) * log(1 - pnorm(t(x) * beta) + exp(.0001)))
optimize(f = LL,
interval = c(-5, 5),
maximum = T)
search_values <- seq(-10, 10, .01)
LL_values <- map_dbl(search_values, LL)
max_point <- tibble(x = search_values[which.max(LL_values)],
y = LL_values[which.max(LL_values)])
max_point
set.seed(1)
x <- rnorm(1000)
z <- 0  + 3*x
# pr <- pnorm(z)
y <- ifelse(z > 0, 1, 0)
# TESTING
sum(log(1 - pnorm(x * 3) > 1 | (log(1 - pnorm(x * 3) < 0))))
sum(pnorm(x * 3) > 1 | pnorm(x * 3) < 0)
a <- y * log(pnorm(x * 3)) + (1 - y) * log(1 - pnorm(x * 3))
# ==============================================================
# Write Down Objective Function & Optimize to Recover Parameters
# ==============================================================
LL <- function(beta) sum(y * log(pnorm(t(x) * beta)) + (1 - y) * log(1 - pnorm(t(x) * beta) + exp(.0001)))
optimize(f = LL,
interval = c(-5, 5),
maximum = T)
search_values <- seq(-10, 10, .01)
LL_values <- map_dbl(search_values, LL)
max_point <- tibble(x = search_values[which.max(LL_values)],
y = LL_values[which.max(LL_values)])
windows()
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = max_point$x + .1, y = -500, xend = max_point$x, yend = max_point$y, arrow = arrow(length = unit(2, "mm"))) +
annotate(geom = "text", x = max_point$x - .05, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and Simulated", expression(Beta))) +
theme_bw()
1 - pnorm(x[843] * 3)
1 - pnorm(x[843] * 3 + exp(.0001))
1 - pnorm(x[843] * 3 + exp(.001))
1 - pnorm(x[843] * 3 + exp(.01))
1 - pnorm(x[843] * 3 + exp(.1))
1 - pnorm(x[843] * 3)
1 - pnorm(x[843] * 3) + exp(.0001)
pnorm(x[843] * 3)
(1 - pnorm(x[843] * 3)) + exp(.0001)
log(1 - pnorm(x[843] * 3) + exp(.0001))
set.seed(1234)
Make_Histogram <- function() {
x <<- rnorm(1000)
z <<- 3*x
y <- ifelse(z > 0, 1, 0)
# ==============================================================
# Write Down Objective Function & Optimize to Recover Parameters
# ==============================================================
LL <- function(beta) sum(y * log(pnorm(t(x) * beta)) + (1 - y) * log(1 - pnorm(t(x) * beta + exp(.0001))))
optimizing <- optimize(f = LL,
interval = c(-4, 4),
maximum = T)
optimizing$maximum
}
betas <- replicate(n = 1000, Make_Histogram())
windows()
ggplot() +
geom_histogram(aes(x = betas), bins = 50) +
geom_vline(xintercept = (z / x)[1], color = "red") +
xlab(expression(beta)) +
ggtitle("Distribution of Beta") +
theme_bw()
warnings()
log(1 - pnorm(x[843] * 3) + exp(.0001))
x[843]
set.seed(1)
x <- rnorm(1000)
z <- 0  + 3*x
# pr <- pnorm(z)
y <- ifelse(z > 0, 1, 0)
log(1 - pnorm(x[843] * 3) + exp(.0001))
y[843]
sum(y[843] * log(pnorm(x[843] * 3)) + (1 - y[843]) * log(1 - pnorm(x[843] * 3) + exp(.0001)))
sum(y[843] * log(pnorm(x[843] * 3)) + (1 - y[843]) * log(1 - pnorm(x[843] * 3)))
y[843] * log(pnorm(x[843] * 3))
y[843]
pnorm(x[843])
pnorm(x[843]*3)
log(1)
set.seed(1)
x <- rnorm(1000)
z <- 0  + 3*x
# pr <- pnorm(z)
y <- ifelse(z > 0, 1, 0)
# TESTING
sum(log(1 - pnorm(x * 3) > 1 | (log(1 - pnorm(x * 3) < 0))))
sum(pnorm(x * 3) > 1 | pnorm(x * 3) < 0)
a <- y * log(pnorm(x * 3)) + (1 - y) * log(1 - pnorm(x * 3))
# ==============================================================
# Write Down Objective Function & Optimize to Recover Parameters
# ==============================================================
LL <- function(beta) sum(y * log(pnorm(t(x) * beta)) + (1 - y) * log(1 - pnorm(t(x) * beta) + exp(.0001)))
optimize(f = LL,
interval = c(-5, 5),
maximum = T)
search_values <- seq(-10, 10, .01)
LL_values <- map_dbl(search_values, LL)
max_point <- tibble(x = search_values[which.max(LL_values)],
y = LL_values[which.max(LL_values)])
plot(search_values, LL_values)
LL <- function(beta) sum(y * log(pnorm(t(x) * beta)) + (1 - y) * log(1 - pnorm(t(x) * beta)))
optimize(f = LL,
interval = c(-5, 5),
maximum = T)
search_values <- seq(-10, 10, .01)
LL_values <- map_dbl(search_values, LL)
plot(search_values, LL_values)
LL <- function(beta) sum(y * log(pnorm(t(x) * beta)) + (1 - y) * log(1 - pnorm(t(x) * beta) + exp(.0001)))
optimize(f = LL,
interval = c(-5, 5),
maximum = T)
search_values <- seq(-10, 10, .01)
a
NaN
is.infinite(a)
is.infinite(a) %>% sum*()
is.infinite(a) %>% sum()
x[843]
a[843]
is.infinite(a[843])
is.finite(a[843])
a[843] == "NaN"
a != "NaN"
a != "NaN" %>% sum()
a != "NaN" %>% class()
p <- a != "NaN"
sum(p)
p
a
a[p]
a[p] %>% sum()
LL_values
LL_values %>% View()
if(pnrorm(t(x)) * beta >=.9999) next()
if(pnorm(t(x)) * beta >=.9999) next()
?next
ifelse(pnorm(t(x)) * beta >=.9999) next()
ifelse(pnorm(t(x)) * beta >=.9999, next(), 0)
x
summary(x)
x <- rnorm(1000, 0, 1)
summary(x)
x <- runif(1000, -1.5, 1.5)
z <- 0  + 3*x
# pr <- pnorm(z)
y <- ifelse(z > 0, 1, 0)
LL <- function(beta) sum(y * log(pnorm(t(x) * beta)) + (1 - y) * log(1 - pnorm(t(x) * beta) + exp(.0001)))
optimize(f = LL,
interval = c(-5, 5),
maximum = T)
search_values <- seq(-10, 10, .01)
LL_values <- map_dbl(search_values, LL)
max_point <- tibble(x = search_values[which.max(LL_values)],
y = LL_values[which.max(LL_values)])
max_point
LL <- function(beta) sum(y * log(pnorm(t(x) * beta)) + (1 - y) * log(1 - pnorm(t(x) * beta)))
optimize(f = LL,
interval = c(-5, 5),
maximum = T)
search_values <- seq(-10, 10, .01)
LL_values <- map_dbl(search_values, LL)
max_point <- tibble(x = search_values[which.max(LL_values)],
y = LL_values[which.max(LL_values)])
max_point
plot(search_values, LL_values)
t(x)
x
t(x)
x
LL <- function(beta) sum(y * log(pnorm(x * beta)) + (1 - y) * log(1 - pnorm(x * beta)))
optimize(f = LL,
interval = c(-5, 5),
maximum = T)
plot(x)
mean(x)
x
var(x)
plot(x, type = "l")
