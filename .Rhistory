xlab(expression(beta)) +
ylab("Log-Likelihood") +
geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "text", x = 4.2, y = -500, label = "value") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = 4.3, y = -500, xend = max_point$x, yend = max_point$y, curvature = .3, arrow = arrow(length = unit(2, "mm"))) +
annotate(geom = "text", x = 4.1, y = 35, label = "Beta", hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = 4.3, y = -500, xend = max_point$x, yend = max_point$y, curvature = .3, arrow = arrow(length = unit(2, "mm"))) +
annotate(geom = "text", x = 4.1, y = 35, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = 4.3, y = -500, xend = max_point$x, yend = max_point$y, curvature = .3, arrow = arrow(length = unit(5, "mm"))) +
annotate(geom = "text", x = 4.1, y = 35, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = 4.3, y = -500, xend = max_point$x, yend = max_point$y, curvature = .3, arrow = arrow(length = unit(2, "mm"))) +
annotate(geom = "text", x = 4.1, y = 35, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = 4.3, y = -500, xend = max_point$x, yend = max_point$y, curvature = .3, arrow = arrow(length = unit(2, "mm"))) +
annotate(geom = "text", x = 4.1, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = 4.3, y = -500, xend = max_point$x, yend = max_point$y, curvature = .3, arrow = arrow(length = unit(2, "cm"))) +
annotate(geom = "text", x = 4.1, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
?annotate
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = 4.3, y = -500, xend = max_point$x, yend = max_point$y, curvature = 0, arrow = arrow(length = unit(2, "cm"))) +
annotate(geom = "text", x = 4.1, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = 4.3, y = -500, xend = max_point$x, yend = max_point$y, curvature = 1, arrow = arrow(length = unit(2, "cm"))) +
annotate(geom = "text", x = 4.1, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = 4.3, y = -500, xend = max_point$x, yend = max_point$y, arrow = arrow(length = unit(2, "cm"))) +
annotate(geom = "text", x = 4.1, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = 4.3, y = -500, xend = max_point$x, yend = max_point$y, arrow = arrow(length = unit(2, "cm"))) +
annotate(geom = "text", x = 4.1, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = 4.3, y = -500, xend = max_point$x, yend = max_point$y, arrow = arrow(length = unit(2, "cm"))) +
annotate(geom = "text", x = 4.1, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = 4.3, y = -500, xend = max_point$x, yend = max_point$y, arrow = arrow(length = unit(2, "mm"))) +
annotate(geom = "text", x = 4.1, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = 4.3, y = -500, xend = max_point$x, yend = max_point$y, arrow = arrow(length = unit(10, "mm"))) +
annotate(geom = "text", x = 4.1, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = 4.3, y = -500, xend = max_point$x, yend = max_point$y, arrow = arrow(length = unit(2, "mm"))) +
annotate(geom = "text", x = 4.1, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = max_point$x + .1, y = -500, xend = max_point$x, yend = max_point$y, arrow = arrow(length = unit(2, "mm"))) +
annotate(geom = "text", x = max_point$x - .05, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta)))
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = max_point$x + .1, y = -500, xend = max_point$x, yend = max_point$y, arrow = arrow(length = unit(2, "mm"))) +
annotate(geom = "text", x = max_point$x - .05, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta))) +
theme_bw()
set.seed(1)
x <- rnorm(1000)
z <- 6*x
pr <- 1/(1 + exp(-z))
y <- rbinom(1000, 1, pr)
standardizer <- 1 # Train, Discrete Choice Methods with Simulation, p. 24
LL <- function(beta) sum(y * log(exp(t(x) * (beta / standardizer)) / (1 + exp(t(x) * (beta / standardizer)))) + (1 - y) * log(1 / (1 + exp(t(x) * (beta / standardizer)))))
optimize(f = LL,
interval = c(-4, 10),
maximum = T)
search_values <- seq(-5, 5, .01)
search_values <- seq(-10, 10, .01)
LL_values <- map_dbl(search_values, LL)
max_point <- tibble(x = search_values[which.max(LL_values)],
y = LL_values[which.max(LL_values)])
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = max_point$x + .1, y = -500, xend = max_point$x, yend = max_point$y, arrow = arrow(length = unit(2, "mm"))) +
annotate(geom = "text", x = max_point$x - .05, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and simulated", expression(Beta))) +
theme_bw()
x <- rnorm(1000)
z <- 1*x
pr <- 1/(1 + exp(-z))
y <- rbinom(1000, 1, pr)
standardizer <- 1 # Train, Discrete Choice Methods with Simulation, p. 24
LL <- function(beta) sum(y * log(exp(t(x) * (beta / standardizer)) / (1 + exp(t(x) * (beta / standardizer)))) + (1 - y) * log(1 / (1 + exp(t(x) * (beta / standardizer)))))
optimize(f = LL,
interval = c(-4, 10),
maximum = T)
search_values <- seq(-10, 10, .01)
LL_values <- map_dbl(search_values, LL)
max_point <- tibble(x = search_values[which.max(LL_values)],
y = LL_values[which.max(LL_values)])
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = max_point$x + .1, y = -500, xend = max_point$x, yend = max_point$y, arrow = arrow(length = unit(2, "mm"))) +
annotate(geom = "text", x = max_point$x - .05, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and Simulated", expression(Beta))) +
theme_bw()
optimize(f = LL,
interval = c(-4, 10),
maximum = T)
set.seed(1)
x <- rnorm(1000)
z <- -3*x
pr <- 1/(1 + exp(-z))
y <- rbinom(1000, 1, pr)
standardizer <- 1 # Train, Discrete Choice Methods with Simulation, p. 24
LL <- function(beta) sum(y * log(exp(t(x) * (beta / standardizer)) / (1 + exp(t(x) * (beta / standardizer)))) + (1 - y) * log(1 / (1 + exp(t(x) * (beta / standardizer)))))
optimize(f = LL,
interval = c(-4, 10),
maximum = T)
search_values <- seq(-10, 10, .01)
LL_values <- map_dbl(search_values, LL)
max_point <- tibble(x = search_values[which.max(LL_values)],
y = LL_values[which.max(LL_values)])
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = max_point$x + .1, y = -500, xend = max_point$x, yend = max_point$y, arrow = arrow(length = unit(2, "mm"))) +
annotate(geom = "text", x = max_point$x - .05, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and Simulated", expression(Beta))) +
theme_bw()
Make_Histogram <- function(number_draws) {
x <- rnorm(1000)
z <- -3*x
pr <- 1/(1 + exp(-z))
y <- rbinom(1000, 1, pr)
# ==============================================================
# Write Down Objective Function & Optimize to Recover Parameters
# ==============================================================
standardizer <- 1 # Train, Discrete Choice Methods with Simulation, p. 24
LL <- function(beta) sum(y * log(exp(t(x) * (beta / standardizer)) / (1 + exp(t(x) * (beta / standardizer)))) + (1 - y) * log(1 / (1 + exp(t(x) * (beta / standardizer)))))
optimizing <- optimize(f = LL,
interval = c(-4, 10),
maximum = T)
optimizing$maximum
replicate(n = number_draws,expr = Make_Histogram)
}
Make_Histogram(3)
Make_Histogram <- function(number_draws) {
x <- rnorm(1000)
z <- -3*x
pr <- 1/(1 + exp(-z))
y <- rbinom(1000, 1, pr)
# ==============================================================
# Write Down Objective Function & Optimize to Recover Parameters
# ==============================================================
standardizer <- 1 # Train, Discrete Choice Methods with Simulation, p. 24
LL <- function(beta) sum(y * log(exp(t(x) * (beta / standardizer)) / (1 + exp(t(x) * (beta / standardizer)))) + (1 - y) * log(1 / (1 + exp(t(x) * (beta / standardizer)))))
optimizing <- optimize(f = LL,
interval = c(-4, 10),
maximum = T)
replicate(n = number_draws,expr = Make_Histogram)
optimizing$maximum
}
Make_Histogram(3)
Make_Histogram(3)
Make_Histogram(3)
Make_Histogram(3)
replicate(n = 3, Make_Histogram())
Make_Histogram <- function() {
x <- rnorm(1000)
z <- -3*x
pr <- 1/(1 + exp(-z))
y <- rbinom(1000, 1, pr)
# ==============================================================
# Write Down Objective Function & Optimize to Recover Parameters
# ==============================================================
standardizer <- 1 # Train, Discrete Choice Methods with Simulation, p. 24
LL <- function(beta) sum(y * log(exp(t(x) * (beta / standardizer)) / (1 + exp(t(x) * (beta / standardizer)))) + (1 - y) * log(1 / (1 + exp(t(x) * (beta / standardizer)))))
optimizing <- optimize(f = LL,
interval = c(-4, 10),
maximum = T)
optimizing$maximum
}
replicate(n = 3, Make_Histogram())
betas <- replicate(n = 100, Make_Histogram())
betas
ggplot() +
geom_histogram(aes(x = betas))
betas <- replicate(n = 10000, Make_Histogram())
ggplot() +
geom_histogram(aes(x = betas))
mean(betas)
ggplot() +
geom_histogram(aes(x = betas)) +
geom_vline(xintercept = (z / x)[1], color = "red")
Make_Histogram <- function() {
x <<- rnorm(1000)
z <<- 5*x
pr <- 1/(1 + exp(-z))
y <- rbinom(1000, 1, pr)
# ==============================================================
# Write Down Objective Function & Optimize to Recover Parameters
# ==============================================================
standardizer <- 1 # Train, Discrete Choice Methods with Simulation, p. 24
LL <- function(beta) sum(y * log(exp(t(x) * (beta / standardizer)) / (1 + exp(t(x) * (beta / standardizer)))) + (1 - y) * log(1 / (1 + exp(t(x) * (beta / standardizer)))))
optimizing <- optimize(f = LL,
interval = c(-4, 10),
maximum = T)
optimizing$maximum
}
betas <- replicate(n = 10000, Make_Histogram())
ggplot() +
geom_histogram(aes(x = betas)) +
geom_vline(xintercept = (z / x)[1], color = "red")
ggplot() +
geom_histogram(aes(x = betas)) +
geom_vline(xintercept = (z / x)[1], color = "red") +
xlab(expression(beta))
ggplot() +
geom_histogram(aes(x = betas)) +
geom_vline(xintercept = (z / x)[1], color = "red") +
xlab(expression(beta)) +
ggtitle(paste("Distribution of", expression(beta)))
ggplot() +
geom_histogram(aes(x = betas)) +
geom_vline(xintercept = (z / x)[1], color = "red") +
xlab(expression(beta)) +
ggtitle("Distribution of Beta")
ggplot() +
geom_histogram(aes(x = betas), bins = 50) +
geom_vline(xintercept = (z / x)[1], color = "red") +
xlab(expression(beta)) +
ggtitle("Distribution of Beta")
ggplot() +
geom_histogram(aes(x = betas), bins = 25) +
geom_vline(xintercept = (z / x)[1], color = "red") +
xlab(expression(beta)) +
ggtitle("Distribution of Beta")
ggplot() +
geom_histogram(aes(x = betas), bins = 100) +
geom_vline(xintercept = (z / x)[1], color = "red") +
xlab(expression(beta)) +
ggtitle("Distribution of Beta")
ggplot() +
geom_histogram(aes(x = betas), bins = 75) +
geom_vline(xintercept = (z / x)[1], color = "red") +
xlab(expression(beta)) +
ggtitle("Distribution of Beta")
ggplot() +
geom_histogram(aes(x = betas), bins = 50) +
geom_vline(xintercept = (z / x)[1], color = "red") +
xlab(expression(beta)) +
ggtitle("Distribution of Beta")
ggplot() +
geom_histogram(aes(x = betas), bins = 50) +
geom_vline(xintercept = (z / x)[1], color = "red") +
xlab(expression(beta)) +
ggtitle("Distribution of Beta") +
theme_bw()
# ========
# Packages
# ========
pacman::p_load(tidyverse)
# ====================
# Generate Pseudo-Data
# ====================
set.seed(1)
x <- rnorm(1000)
z <- -3*x
pr <- 1/(1 + exp(-z))
y <- rbinom(1000, 1, pr)
# ==============================================================
# Write Down Objective Function & Optimize to Recover Parameters
# ==============================================================
standardizer <- 1 # Train, Discrete Choice Methods with Simulation, p. 24
LL <- function(beta) sum(y * log(exp(t(x) * (beta / standardizer)) / (1 + exp(t(x) * (beta / standardizer)))) + (1 - y) * log(1 / (1 + exp(t(x) * (beta / standardizer)))))
optimize(f = LL,
interval = c(-4, 10),
maximum = T)
search_values <- seq(-10, 10, .01)
LL_values <- map_dbl(search_values, LL)
max_point <- tibble(x = search_values[which.max(LL_values)],
y = LL_values[which.max(LL_values)])
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = max_point$x + .1, y = -500, xend = max_point$x, yend = max_point$y, arrow = arrow(length = unit(2, "mm"))) +
annotate(geom = "text", x = max_point$x - .05, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and Simulated", expression(Beta))) +
theme_bw()
# =====================================
# Monte Carlo for Distribution of Beta
# =====================================
set.seed(1234)
Make_Histogram <- function() {
x <<- rnorm(1000)
z <<- 5*x
pr <- 1/(1 + exp(-z))
y <- rbinom(1000, 1, pr)
# ==============================================================
# Write Down Objective Function & Optimize to Recover Parameters
# ==============================================================
standardizer <- 1 # Train, Discrete Choice Methods with Simulation, p. 24
LL <- function(beta) sum(y * log(exp(t(x) * (beta / standardizer)) / (1 + exp(t(x) * (beta / standardizer)))) + (1 - y) * log(1 / (1 + exp(t(x) * (beta / standardizer)))))
optimizing <- optimize(f = LL,
interval = c(-4, 10),
maximum = T)
optimizing$maximum
}
# =====================================
# Make Draws with Histogram of Results
# =====================================
betas <- replicate(n = 10000, Make_Histogram())
ggplot() +
geom_histogram(aes(x = betas), bins = 50) +
geom_vline(xintercept = (z / x)[1], color = "red") +
xlab(expression(beta)) +
ggtitle("Distribution of Beta") +
theme_bw()
# ========
# Packages
# ========
pacman::p_load(tidyverse)
# ====================
# Generate Pseudo-Data
# ====================
set.seed(1)
x <- rnorm(1000)
z <- -3*x
pr <- 1/(1 + exp(-z))
y <- rbinom(1000, 1, pr)
# ==============================================================
# Write Down Objective Function & Optimize to Recover Parameters
# ==============================================================
standardizer <- 1 # Train, Discrete Choice Methods with Simulation, p. 24
LL <- function(beta) sum(y * log(exp(t(x) * (beta / standardizer)) / (1 + exp(t(x) * (beta / standardizer)))) + (1 - y) * log(1 / (1 + exp(t(x) * (beta / standardizer)))))
optimize(f = LL,
interval = c(-4, 10),
maximum = T)
search_values <- seq(-10, 10, .01)
LL_values <- map_dbl(search_values, LL)
max_point <- tibble(x = search_values[which.max(LL_values)],
y = LL_values[which.max(LL_values)])
windows()
ggplot() +
geom_line(aes(x = search_values, y = LL_values)) +
geom_vline(xintercept = (z / x)[1], color = "red") + # true beta
geom_point(aes(x = search_values[which.max(LL_values)], y = LL_values[which.max(LL_values)]), color = "green", size = 2) +
xlab(expression(beta)) +
ylab("Log-Likelihood") +
annotate(geom = "curve", x = max_point$x + .1, y = -500, xend = max_point$x, yend = max_point$y, arrow = arrow(length = unit(2, "mm"))) +
annotate(geom = "text", x = max_point$x - .05, y = -505, label = max_point$x, hjust = "left") +
# geom_text(data = max_point, aes(x = x, y = y, label = paste(max_point$x)), nudge_y = -500, nudge_x = .25) +
ggtitle(paste("True", expression(Beta), "and Simulated", expression(Beta))) +
theme_bw()
# =====================================
# Monte Carlo for Distribution of Beta
# =====================================
set.seed(1234)
Make_Histogram <- function() {
x <<- rnorm(1000)
z <<- 5*x
pr <- 1/(1 + exp(-z))
y <- rbinom(1000, 1, pr)
# ==============================================================
# Write Down Objective Function & Optimize to Recover Parameters
# ==============================================================
standardizer <- 1 # Train, Discrete Choice Methods with Simulation, p. 24
LL <- function(beta) sum(y * log(exp(t(x) * (beta / standardizer)) / (1 + exp(t(x) * (beta / standardizer)))) + (1 - y) * log(1 / (1 + exp(t(x) * (beta / standardizer)))))
optimizing <- optimize(f = LL,
interval = c(-4, 10),
maximum = T)
optimizing$maximum
}
# =====================================
# Make Draws with Histogram of Results
# =====================================
betas <- replicate(n = 10000, Make_Histogram())
windows()
ggplot() +
geom_histogram(aes(x = betas), bins = 50) +
geom_vline(xintercept = (z / x)[1], color = "red") +
xlab(expression(beta)) +
ggtitle("Distribution of Beta") +
theme_bw()
